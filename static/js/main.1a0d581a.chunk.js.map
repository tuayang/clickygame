{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","yourScore","topScore","clickMessage","App","state","images","_this","clickMatch","filter","match","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","components_Card_Card","key","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a0d581a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img alt={props.name} src={props.image} />\n\t\t\t\t</div>\n\t\t\t</div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n      \nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport images from \"./Images.json\";\n\n\nlet yourScore = 0;\nlet topScore = 0;\nlet clickMessage = \"Click on a Pokémon to earn a point! The images will shuffle after each click. The goal is to reach a top score of 20 points by attempting to click on all Pokémon images only once.\";\n\nclass App extends Component {\n    \n        state = {\n        images,\n        yourScore,\n        topScore,\n        clickMessage\n    };\n\n    setClicked = id => {\n\n        // Make a copy of the state images array to work with\n        const images = this.state.images;\n\n        // Filter for the clicked match\n        const clickMatch = images.filter(match => match.id === id);\n\n        // If the matched image's clicked value is already true, \n        // do the game over actions\n        if (clickMatch[0].clicked){\n\n            console.log (\"Your Score: \" + yourScore);\n            console.log (\"Best Score: \" + topScore);\n\n            yourScore = 0;\n            clickMessage = \"You guessed incorrectly! Try again!\"\n\n            for (let i = 0 ; i < images.length ; i++){\n                images[i].clicked = false;\n            }\n\n            this.setState({clickMessage});\n            this.setState({ yourScore });\n            this.setState({images});\n\n        // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (yourScore < 11) {\n\n            // Set its value to true\n            clickMatch[0].clicked = true;\n\n            // increment the appropriate counter\n            yourScore++;\n            \n            clickMessage = \"You guessed correctly! Keep guessing!\";\n\n            if (yourScore > topScore){\n                topScore = yourScore;\n                this.setState({ topScore });\n            }\n\n            // Shuffle the array to be rendered in a random order\n            images.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.images equal to the new images array\n            this.setState({ images });\n            this.setState({yourScore});\n            this.setState({clickMessage});\n        } else {\n\n            // Set its value to true\n            clickMatch[0].clicked = true;\n\n            // restart the guess counter\n            yourScore = 0;\n\n            // Egg on the user to play again\n            clickMessage = \"Winner! Winner! Wanna Try again!\";\n            topScore = 20;\n            this.setState({ topScore });\n            \n            for (let i = 0 ; i < images.length ; i++){\n                images[i].clicked = false;\n            }\n\n            // Shuffle the array to be rendered in a random order\n            images.sort(function(a, b){return 0.5 - Math.random()});\n\n            // Set this.state.images equal to the new images array\n            this.setState({ images });\n            this.setState({yourScore});\n            this.setState({clickMessage});\n\n        }\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>\n                  The Clicky Game\n                  <div>            \n                  <h3 className=\"scoreSummary card-header\">\n                      Your Score: {this.state.yourScore} \n                      <br />\n                      Top Score: {this.state.topScore} \n                  </h3>\n                  <br></br>\n                  <h3 className=\"scoreSummary\">\n                      {this.state.clickMessage}\n                  </h3>\n                  </div>\n                </Title>\n                <div className=\"container\">\n                <div className=\"row\">\n                {this.state.images.map(match => (\n                    <Card\n                        setClicked={this.setClicked}\n                        id={match.id}\n                        key={match.id}\n                        image={match.image}\n                    />\n                ))}\n                </div>\n                </div>\n\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}